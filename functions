# vim:ft=sh

#本文定义通用函数, 与业务逻辑无关的通用函数(任意业务均可使用)
#所有函数, 返回值为1表示异常

get_lan_ip  () {
   if  grep -w LAN_IP /etc/blueking/env/local.env > /dev/null 2>&1;then
      awk -F '=' '/LAN_IP/{print $2}' /etc/blueking/env/local.env
   else
      ip addr | \
          awk -F'[ /]+' '/inet/{
                  split($3, N, ".")
                  if ($3 ~ /^192.168/) {
                      print $3
                  }
                  if (($3 ~ /^172/) && (N[2] >= 16) && (N[2] <= 31)) {
                      print $3
                  }
                  if ($3 ~ /^10\./) {
                      print $3
                  }
             }'

      return $?
   fi
}

get_lan_iface () {
   ip route | grep -wE $LAN_IP | awk -F '[ \t*]' '{print $3;exit}'
}

get_wan_ip () {
    curl -XGET -s icanhazip.com
}

_yum () {
    http_proxy=$BK_PROXY https_proxy=$BK_PROXY yum "$@"
}

CURR_PID=$$
HASTTY=
LAN_IP=$(get_lan_ip | head -1)
if [ -z "$HASTTY" ]; then
    HASTTY=$(ps -ef | awk -v P=$CURR_PID '$2==P { if ( $6 == "?") {print 0} else {print 1}}')
fi

cost_time_attention () {
   local time=$1
   local timestamp=$(date +%Y%m%d-%H%M%S)
   local level=INFO
   local func_seq=$(echo ${FUNCNAME[@]} | sed 's/ /-/g')
   local logfile=${LOG_FILE:=/tmp/bkc.log}
   if [[ -z "$time" ]]; then
      msg=" This step may be need a little time, please wait!"
   else
      if [[ $1 =~ ^[0-9]+ ]]; then
         msg=" This step may be need a little time, please wait! Expected within '$time' seconds."
      else
         msg="$1"
      fi
   fi

   echo "[$(blue_echo $LAN_IP)]$timestamp $BASH_LINENO   $(bblue_echo $msg)"
   echo "[$(blue_echo $LAN_IP)]$timestamp $level|$BASH_LINENO|${func_seq} $msg" >> $logfile

   return 0
}

emphasize () {
   local timestamp=$(date +%Y%m%d-%H%M%S)
   local level=INFO
   local func_seq=$(echo ${FUNCNAME[@]} | sed 's/ /-/g')
   local logfile=${LOG_FILE:=/tmp/bkc.log}

   echo "[$(blue_echo $LAN_IP)]$timestamp $BASH_LINENO   $(bblue_echo $@)"
   echo "[$(blue_echo $LAN_IP)]$timestamp $level|$BASH_LINENO|${func_seq} $@" >> $logfile

   return 0
}

log () {
   # 打印消息, 并记录到日志, 日志文件由 LOG_FILE 变量定义
   local retval=$?
   local timestamp=$(date +%Y%m%d-%H%M%S)
   local level=INFO
   local func_seq=$(echo ${FUNCNAME[@]} | sed 's/ /-/g')
   local logfile=${LOG_FILE:=/tmp/bkc.log}

   echo "[$(blue_echo $LAN_IP)]$timestamp $BASH_LINENO   $@"
   echo "[$(blue_echo $LAN_IP)]$timestamp $level|$BASH_LINENO|${func_seq} $@" >>$logfile
   return $retval
}

err () {
   # 打印错误消息, 并返回非0
   # 屏幕输出使用红色字体
   local timestamp=$(date +%Y%m%d-%H%M%S)
   local level=ERROR
   local func_seq=$(echo ${FUNCNAME[@]} | sed 's/ /-/g')
   local logfile=${LOG_FILE:=/tmp/bkc.log}

   
   echo "[$(red_echo $LAN_IP)]$timestamp $BASH_LINENO   $(red_echo $@)"
   echo "[$(red_echo $LAN_IP)]$timestamp $level|$BASH_LINENO|${func_seq} $@" >> $logfile

   return 1
}

warn () {
   # 打印警告消息, 并返回0
   # 屏幕输出使用黄色字体
   local timestamp=$(date +%Y%m%d-%H%M%S)
   local level=WARN
   local func_seq=$(echo ${FUNCNAME[@]} | sed 's/ /-/g;')
   local logfile=${LOG_FILE:=/tmp/bkc.log}

   echo "[$(yellow_echo $LAN_IP)]$timestamp $BASH_LINENO   $(yellow_echo $@)"
   echo "[$(yellow_echo $LAN_IP)]$timestamp $level|$BASH_LINENO|${func_seq} $@" >> $logfile
   
   return 0
}

fail () {
   # 打印错误消息,并以非0值退出程序
   # 参数1: 消息内容
   # 参数2: 可选, 返回值, 若不提供默认返回1
   local timestamp=$(date +%Y%m%d-%H%M%S)
   local level=FATAL
   local retval=${2:-1}
   local func_seq=$(echo ${FUNCNAME[@]} | sed 's/ /-/g')
   local logfile=${LOG_FILE:=/tmp/bkc.log}

   echo "[$(red_echo $LAN_IP)]$timestamp $BASH_LINENO   $(red_echo $@)"
   echo "[$(red_echo $LAN_IP)]$timestamp $level|$BASH_LINENO|${func_seq} $@" >> $logfile

   exit $retval
}

debug () {
    if [ ! -z "$DEBUG" ]; then
        warn $@
    fi
}

light () {
   # 打印标准输出(绿色消息), 说明某个过程执行成功, 状态码为0
   local timestamp=$(date +%Y%m%d-%H%M%S)
   local level=INFO
   local func_seq=$(echo ${FUNCNAME[@]} | sed 's/ /-/g')
   local logfile=${LOG_FILE:=/tmp/bkc.log}

   echo "[$(purple_echo $LAN_IP)]$timestamp $BASH_LINENO   $(purple_echo $@)"
   echo "[$(purple_echo $LAN_IP)]$timestamp $level|$BASH_LINENO|${func_seq} $@" >> $logfile
   
   return 0
}

ok () {
   # 打印标准输出(绿色消息), 说明某个过程执行成功, 状态码为0
   local timestamp=$(date +%Y%m%d-%H%M%S)
   local level=INFO
   local func_seq=$(echo ${FUNCNAME[@]} | sed 's/ /-/g')
   local logfile=${LOG_FILE:=/tmp/bkc.log}

   echo "[$(green_echo $LAN_IP)]$timestamp $BASH_LINENO   $(green_echo $@)"
   echo "[$(green_echo $LAN_IP)]$timestamp $level|$BASH_LINENO|${func_seq} $@" >> $logfile
   
   return 0
}

assert () {
    local check_ret=$?
    local msg="$1"
    local err="$2"

    if [ $check_ret -eq 0 ]; then
        ok "$msg"
    else
        fail "$err"
    fi
}

wassert () {
    local check_ret=$?
    local msg="$1"
    local err="$2"

    if [ $check_ret -eq 0 ]; then
        ok "$msg"
    else
        warn "$err"
    fi
}

nassert () {
    local check_ret=$?
    local msg="$1"
    local err="${2:-$1}"

    if [ $check_ret -eq 0 ]; then
        log "$msg.  $(green_echo OK)"
    else
        log "$err.  $(red_echo FAILED)"
        exit 1
    fi
}

step () {
   # 打印步骤信息, 并记录当前步骤节点
   # 输出使用带背景的红色
   echo ""
   l=$(( (70 - $(wc -c <<<"$@"))/2 ))
   str="$(printf "%${l}s$@%${l}s" ' ' ' ')"
   bblue_echo "$str"
}

syscmd_byos () {
    local action=$1 
    local name=$2

    if which systemctl >/dev/null 2>&1; then
        systemctl $action $name
    else
        case $action in
            enable) chkconfig "$name" on ;;
            is-active) service status "$name" ;;
            *) service $name $action ;;
        esac
    fi
}

red_echo ()      { [ "$HASTTY" == 0 ] && echo "$@" || echo -e "\033[031;1m$@\033[0m"; }
green_echo ()    { [ "$HASTTY" == 0 ] && echo "$@" || echo -e "\033[032;1m$@\033[0m"; }
yellow_echo ()   { [ "$HASTTY" == 0 ] && echo "$@" || echo -e "\033[033;1m$@\033[0m"; }
blue_echo ()     { [ "$HASTTY" == 0 ] && echo "$@" || echo -e "\033[034;1m$@\033[0m"; }
purple_echo ()   { [ "$HASTTY" == 0 ] && echo "$@" || echo -e "\033[035;1m$@\033[0m"; }
bred_echo ()     { [ "$HASTTY" == 0 ] && echo "$@" || echo -e "\033[041;1m$@\033[0m"; }
bgreen_echo ()   { [ "$HASTTY" == 0 ] && echo "$@" || echo -e "\033[042;1m$@\033[0m"; }
byellow_echo ()  { [ "$HASTTY" == 0 ] && echo "$@" || echo -e "\033[043;1m$@\033[0m"; }
bblue_echo ()    { [ "$HASTTY" == 0 ] && echo "$@" || echo -e "\033[044;1m$@\033[0m"; }
bpurple_echo ()  { [ "$HASTTY" == 0 ] && echo "$@" || echo -e "\033[045;1m$@\033[0m"; }
bgreen_echo ()   { [ "$HASTTY" == 0 ] && echo "$@" || echo -e "\033[042;34;1m$@\033[0m"; }

rcmd () {
    # usage:
    #   rcmd USER@HOST:PORT "command"
    # 输出命令结果
    # 记录执行情况到日志中
    local rhost=$1; shift

    ssh -o StrictHostKeyChecking=no $rhost "bash -lc 'source $CTRL_DIR/.rcmdrc; export HASTTY=1; $@'"
}

# means:  for multiple ips remote command, if parallel exists, using it. else using for loop
# usage: m_rcmd "ip<space>ip<space>" "any command; command | grep $foo"
#        m_rcmd "${MODULE_IP[*]}" "any command; command | grep $foo"
m_rcmd () {
    local ips=()
    read -r -a ips <<<"$1"
    shift 1
    if command -v parallel &>/dev/null; then
        parallel --tagstring '[\033[034;1m{}\033[0m]' ssh {} "'source $CTRL_DIR/.rcmdrc; export HASTTY=1; $@'" ::: "${ips[@]}"
    else
        for ip in "${ips[@]}"; do
            rcmd $ip "$@" | awk -v ip=$ip '{print "[","\033[034;1m" ip "\033[0m","]",$0}'
        done
    fi
}

_rsync () {
    # 安装部署,固定使用 root 执行文件传输
    # 若是本机之间文件传输, 则去掉登陆验证步骤
    opts=$(sed "s/root@$LAN_IP://" <<<"$@")
    log ">> rsync $opts"
    rsync $opts || fail "copy files to remote failed."
}

total_mem () {
    free | awk '/Mem/{print int($2/1000/1000)}'
}

process_is_running () {
    # 模糊匹配, 检测时输入更精确匹配进程的模式表达式
    local pattern="$1"
    
    ps -ef | grep "$pattern" \
           | grep -vE '(grep |bash -l)' \
           | awk '{print $2;a++}END{if (a>0) {exit 0} else {exit 1}}'
}

process_paired () {
    local pids=($@)

    [ "${#pids[@]}" -ne 2 ] && return 1

    local pattern1="$(echo ${pids[1]}  *${pids[0]})
    local pattern2="$(echo ${pids[0]}  *${pids[1]})

    if process_is_running "$pattern1" >/dev/null 2>&1 || \
        process_is_running "$pattern2" >/dev/null 2>&1; then
        if ps xao pid,ppid | grep -w ${pids[0]} >/dev/null 2>&1 || \
            ps xao pid,ppid | grep -w ${pids[1]} >/dev/null 2>&1; then
            return 0
        fi
    fi

    return 1
}

random_string () {
    local length=${1:-51}

    python -c "import random,string; print ''.join(random.sample(string.ascii_letters + '$%&()+,-.:<=?@[]_{}' + string.digits, $length))"
}

check_ns_alive () {
    local ns=$1

    [ ! -z "$(dig +short $ns)" ]
}

wait_ns_die () {
    local timeout=23
    local ns=$1

    for i in $(seq 1 $timeout); do
        if ! check_ns_alive "$ns"; then
            return 0
        fi
        sleep 1
    done

    return 1
}

wait_ns_alive () {
    local timeout=23
    local ns=$1

    for i in $(seq 1 $timeout); do
        if check_ns_alive "$ns"; then
            return 0
        fi
        sleep 1
    done

    return 1
}

check_port_alive () {
    local port=$1

    lsof -i:$port -sTCP:LISTEN 1>/dev/null 2>&1

    return $?
}

wait_port_alive () {
    local port=$1
    local timeout=${2:-10}

    for i in $(seq $timeout); do
        check_port_alive $port && return 0
        sleep 1
    done
    return 1
}

wait_http_port_alive () {
    local host=$1
    local port=$2
    local timeout=${3:-10}

    for i in $(seq $timeout); do
        curl --connect-timeout 2 -s ${host}:${port} -o /dev/null && return 0
        sleep 1
    done
    return 1
}

wait_http_api_health () {
    local api=$1
    local pattern=$2
    local timeout=${3:-10}
    for i in $(seq $timeout); do
        curl --connect-timeout 2 -s "$api" | grep -qE "$pattern" && return 0
        sleep 1
    done
    return 1
}

wait_for_done_bylog () {
    local logfile="$1"
    local keywords="$2"
    local timeout=${3:-60}

    for i in {0..9}; do
        [ ! -f $logfile ] && sleep 1 || break
    done

    start_line=$(wc -l <$logfile)

    for i in $(seq $timeout); do
        tail -n +$((start_line++)) $logfile | grep -q "$keywords"
        if [ $? -ne 0 ]; then
            sleep 1
            start_line=$(wc -l $logfile | cut -d ' ' -f1)
        else
            return 0
        fi
    done

	return 1
}

check_agreement () {
    if [ ! -f .agreed ]; then
        read -p "$(< agreement.txt)" reply
        if [ "$reply" != "yes" ]; then
            red_echo "Abort"
            return 1
        else
            touch .agreed
        fi
    fi

    return 0
}

replace_control_script () {
    local module=$1
    local project=$2
    local location=$3
}

value_of () {
    [ $# -eq 0 ] && return 

    shopt -u nullglob
    eval echo \${${1}}
    shopt -s nullglob
}

map_name2ip () {
    local module=$1
    local proj=$2

    case $module in
        gse_agent | ntp | global_*)  name=all ;;
        saas-o | saas-t ) name=lan ;;
        open_paas) name=paas ;;
        *)
            if [ -z "$proj" ]; then
                name=$module
            else
                name=${module}_${proj//-/_}
                if [ -z "$(value_of ${name^^}_IP)" ]; then
                    name=$module
                fi
            fi
            ;;
    esac

    eval echo "\${${name^^}_IP[@]}"
}

process_timeout () {
    local cmd="$1"
    local timeout=${2:=40};

    ( $cmd ) &
    _pid_for_waiting=$!

    for i in $(seq 1 $timeout); do
        [ -d /proc/$_pid_for_waiting ] && sleep 1 || return 0
    done

    return 1
}

is_string_in_array() {
    local e
    for e in "${@:2}"; do
        [[ "$e" == "$1" ]] && return 0
    done
    return 1
}

make_tag () {
    local tag_name="$1"
    local tag_path="$HOME/.tag"
    local tag_file="${tag_path}/${tag_name}"
    local ret=0

    if [ ! -d ${tag_path} ]; then
        if ! mkdir -p "${tag_path}"; then
            err "create migrate tag dir for db migration failed. please"
            err "   1. creaet direcotry ${tag_path} manually"
            err "   2. touch file ${tag_file}"
            err "   3. re-run the command"

            return 1
        fi
    fi

    touch $tag_file ; ret=$?
    chattr +i $tag_file

    return $ret
}

check_tag () {
    local tag_name="$1"
    local tag_path="$HOME/.tag"
    local tag_file="${tag_path}/${tag_name}"
    local ret=0

	[ -f $tag_file ]
}

mkcd () {
    mkdir -p $1
    cd $1
}

# random password
# default length: 12
# default character list: [[:alnum:]] + '_-'
# Usage: rndpw 20 $'!@#$%^<>()[]'
rndpw () {
    </dev/urandom tr -dc _A-Z-a-z-0-9"$2" | head -c"${1:-12}"
}

gen_bkrc () {
    if ! grep -q '/.bkrc' $HOME/.bashrc 2>/dev/null; then
        echo "[ -f $HOME/.bkrc ] && source $HOME/.bkrc" >> $HOME/.bashrc
    fi

    cat >$HOME/.bkrc <<_OO_
umask 022
export RUN_MODE=$RUN_MODE
export INSTALL_PATH=$INSTALL_PATH
export BK_PKG_SRC_PATH=$BK_PKG_SRC_PATH
export CTRL_DIR=$CTRL_DIR
export PATH=/opt/py36/bin:\${PATH}
export WORKON_HOME=$INSTALL_PATH/.envs

if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
    export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
    source /usr/local/bin/virtualenvwrapper.sh
elif [ -f /opt/py27/bin/virtualenvwrapper.sh ]; then
    export VIRTUALENVWRAPPER_PYTHON=/opt/py27/bin/python
    source /opt/py27/bin/virtualenvwrapper.sh
elif [ -f /opt/py36/bin/virtualenvwrapper.sh ]; then
    export VIRTUALENVWRAPPER_PYTHON=/opt/py36/bin/python
    source /opt/py36/bin/virtualenvwrapper.sh
fi

export BK_HOME=\$INSTALL_PATH
export CONF_HOME=\$BK_HOME/etc
export BK_CERT_PATH=\$BK_HOME/cert
export BK_CERT_HOME=\$BK_HOME/cert
export DATA_HOME=\$BK_HOME/public
export LOGS_PATH=\$BK_HOME/logs
alias pcmd=$CTRL_DIR/pcmd.sh
_OO_
}

set_global_var () {
    cat > $CTRL_DIR/.rcmdrc <<_OO_
umask 022
export HASTTY=1
export LC_ALL=en_US.UTF-8
export BK_HOME=$INSTALL_PATH
export CONF_HOME=$INSTALL_PATH/etc
export BK_CERT_PATH=$INSTALL_PATH/cert
export DATA_HOME=$INSTALL_PATH/public
export BK_PKG_SRC_PATH=$PKG_SRC_PATH
export INSTALL_PATH=$INSTALL_PATH
PATH=/opt/py36/bin:\${PATH}
export CTRL_DIR=$CTRL_DIR
export WORKON_HOME=$INSTALL_PATH/.envs
source \$CTRL_DIR/load_env.sh
ulimit -n 102400
read CTRL_IP ignore <\$CTRL_DIR/.controller_ip
export CTRL_IP
_OO_

    . $CTRL_DIR/.rcmdrc
}

set_controller () {
   if [ ! -f $CTRL_DIR/.controller_ip ]; then
       echo $LAN_IP >$CTRL_DIR/.controller_ip
   fi
}

check_if_is_controller () {
    if [ -f $CTRL_DIR/.controller_ip ]; then
        read ip ignore <$CTRL_DIR/.controller_ip
        if [ "$ip" == "" ]; then
            err "get controller IP failed. please check if the ip address is a standard private ip"
        elif [ $ip != "$LAN_IP" ]; then
            fail "current host is not the controller"
        fi
    fi
}

check_base_var () {
    if [ -z "$PKG_SRC_PATH" ]; then
        export PKG_SRC_PATH=$(cd $PWD/../src; pwd)
    elif [ ! -d "$PKG_SRC_PATH" ]; then
        fail "$PKG_SRC_PATH does not exists."
    fi

    if [ "X$INSTALL_PATH" == "X$PKG_SRC_PATH" ]; then
        err "target install path CAN NOT be the same with source path"
        fail "please check you env variable: INSTALL_PATH, PKG_SRC_PATH"
    fi

    if [ "X$(readlink -sf $INSTALL_PATH)" == "X$(readlink -sf $CTRL_DIR)" ]; then
        err "target install path CAN NOT be the same with current dir $(pwd)"
        fail "please set a new value to INSTALL_PATH"
    fi
}

get_controller () {
    local ip

    read ip ignore <./.controller_ip
    if [ "$ip" == "" ]; then
        fail "get controller IP failed. please check if the ip address is a standard private ip"
    elif [ $ip != "$LAN_IP" ]; then
        fail "current host is not the controller"
    fi
}

check_lanip () {
    if [ "$LAN_IP" == "" ]; then
        echo "get LAN_IP failed. please specify current LAN_IP in /etc/blueking/env/local.env file."
        echo "for example, if your private network ip is 9.1.1.1, then edit /etc/blueking/env/local.env(create if not exists) contains:"
        echo "LAN_IP=9.1.1.1"
        echo 
        exit 1
    fi
}

check_install_path () {
    local self_dir=$1
    local default_install_path=$(awk -F= '$1 == "BK_HOME" { print $2}' "$self_dir"/bin/default/global.env )

    cd $CTRL_DIR
    if [ -z "$INSTALL_PATH" ]; then
        if [ ! -f ".path" ]; then
            echo "where do you want to install blueking products."
            read -p "enter an absolute path [$default_install_path]: " reply

            if [ -z "$reply" ]; then
                export INSTALL_PATH="$default_install_path"
            elif [ "${reply:0:1}" != "/" ]; then
                echo "$reply is not absolute path, please run again"
                exit 1
            elif [ "${reply%/*}" != "" ]; then
                if [ -h $reply ]; then
                    echo "install_path CAN NOT be a symbolic link"
                    exit 1
                elif [ -d "$reply" ]; then
                    read -p "directory $reply exists, are you sure to install blueking suite to $reply (y/n)? " r2
                    if [ "$r2" == "y" ]; then
                        export INSTALL_PATH="$reply"
                    else
                        echo "Abort. running again to set a new location"
                        exit 1
                    fi
                else
                    mkdir -p $reply || fail "create directory $reply failed."
                    export INSTALL_PATH="$reply"
                fi
            fi
            echo "$INSTALL_PATH" >.path
        else
            read INSTALL_PATH ignore <".path"
            [ -z "$INSTALL_PATH" ] && fail "INSTALL_PATH is empty"
            export INSTALL_PATH
        fi
    elif [ ! -f ".path" ]; then
        echo $INSTALL_PATH >.path
    fi
}

check_name () {
    local action=$1
    local name=$2
    
    if ! type ${action}_${name%0*} >/dev/null 2>&1; then
        echo "$(red_echo ${action} ${name}): module '${name}' not supported"
        echo "the following names are supported by command $(blue_echo ${action}):"
        set | grep ^${action}_ | sed 's/_/ /; s/ ()//;s/^/   /'
        echo 
        exit 1
     fi
}

urlencode() {
    # Usage: urlencode "string"
    local LC_ALL=C
    for (( i = 0; i < ${#1}; i++ )); do
        : "${1:i:1}"
        case "$_" in
            [a-zA-Z0-9.~_-])
                printf '%s' "$_"
            ;;

            *)
                printf '%%%02X' "'$_"
            ;;
        esac
    done
    printf '\n'
}

shell_type_check () {
    if [[ -z "${BASH_VERSION}" ]]; then
        error "部署脚本仅支持Bash Shell, 当前终端默认Shell为: $SHELL"
    fi
}