upstream nodeman_backend {
    {{ range service "nodeman-api" }}server {{ .Address }}:{{ .Port }} max_fails=1 fail_timeout=60;
    {{else}}server 127.0.0.1:8000;{{ end }}
}

# 浏览器域名的配置主要用于监控插件的导出下载
server {
    listen 80;
    server_name {{ key "bkcfg/fqdn/nodeman" }} {{ if keyExists "bkcfg/global/nodeman_wan_ip" }}{{ key "bkcfg/global/nodeman_wan_ip" }}{{ end }};
    access_log  {{ key "bkcfg/global/bk_home" }}/logs/nginx/nodeman_access.log  main;
    error_log  {{ key "bkcfg/global/bk_home" }}/logs/nginx/nodeman_error.log warn;

{{ if key "bkcfg/global/bk_http_schema" | regexMatch "^https$" }}
    ### ssl config begin ###
    listen {{ key "bkcfg/ports/paas_https" }}  ssl;
    include /usr/local/openresty/nginx/conf/bk.ssl;
    # force https-redirects
    if ($scheme = http) {
        return 301 https://$server_name$request_uri;
    }
    ### ssl config end ###
{{ end }}

    # replace miniweb
    location /download {
        root {{ key "bkcfg/global/bk_home" }}/public/bknodeman/;
    }

    location / {
        proxy_pass http://nodeman_backend;
        proxy_pass_header Server;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_read_timeout 600;
    }

    location ~ /metrics {
        return 403;
    }

    location /protect_download {
        internal;

        add_header 'Content-Disposition' "attachment; filename=\"$arg_real_name\"";
        alias {{ key "bkcfg/global/bk_home" }}/public/bknodeman/export/;
    }
}

server {
    listen 80;
    server_name nodeman-api.service.consul {{ sockaddr "GetAllInterfaces | exclude \"type\" \"IPv6\" | exclude \"name\" \"lo\" |  join \"address\" \" \"" }};

    access_log  {{ key "bkcfg/global/bk_home" }}/logs/nginx/nodeman_access.log  main;
    error_log  {{ key "bkcfg/global/bk_home" }}/logs/nginx/nodeman_error.log warn;

    proxy_next_upstream  http_502 http_504 error timeout invalid_header;

    # replace miniweb
    location /download {
        root {{ key "bkcfg/global/bk_home" }}/public/bknodeman/;
    }

    location / {
        proxy_pass http://nodeman_backend;
        proxy_pass_header Server;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_read_timeout 600;
    }

    location /protect_download {
        internal;

        add_header 'Content-Disposition' "attachment; filename=\"$arg_real_name\"";
        alias {{ key "bkcfg/global/bk_home" }}/public/bknodeman/export/;
    }

    location /backend/package/upload/ {
        client_body_timeout  1800s;
        client_max_body_size 500M;
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $http_origin;
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Max-Age' 3600;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';
            add_header 'Content-Length' 0;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            return 204;
        }

        client_body_buffer_size 128K;
        upload_pass @BK_NODEMAN_UPLOAD;
        upload_store {{ key "bkcfg/global/bk_home" }}/public/bknodeman/upload 1;
        upload_store_access user:rw group:rw all:r;
        upload_state_store {{ key "bkcfg/global/bk_home" }}/public/nginx/cache;
        upload_cleanup 400 404 499 500-505;
        upload_limit_rate 0;

        upload_set_form_field "file_name" $upload_file_name;
        upload_set_form_field "file_local_path" $upload_tmp_path;

        upload_aggregate_form_field "file_local_md5" $upload_file_md5;
        upload_aggregate_form_field "file_local_size" $upload_file_size;
        upload_aggregate_form_field "file_local_sha1" $upload_file_sha1;

        upload_pass_form_field ".*";
        upload_cleanup 400 404 499 500-505;
    }

    location @BK_NODEMAN_UPLOAD {
        proxy_pass http://nodeman_backend;
        proxy_set_header Host $http_host;
    }

}